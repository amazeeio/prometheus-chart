alertmanager:
  nodeSelector:
    region: node

  ## Persist storage

  # storageSpec:
  #   volumeClaimTemplate:
  #   # - metadata:
  #   #     name: alertmanager-db
  #     spec:
  #       storageClassName: gp2
  #       accessModes: ["ReadWriteOnce"]
  #       resources:
  #         requests:
  #           storage: 1Gi

  config:
    route:
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      group_by: ['cluster', 'alertname', 'service']

      # The child route trees
      routes:
      # Do not alert on warning
      - match:
          severity: warning
        receiver: 'null'

    # Inhibition rules allow to mute a set of alerts given that another alert is
    # firing.
    # We use this to mute any warning-level notifications if the same alert is 
    # already critical.
    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      # Apply inhibition if the alertname is the same.
      equal: ['alertname', 'cluster', 'service']

    receivers:
    - name: 'null'


prometheus:

  ## How long to retain metrics for
  # retention: 15d

  nodeSelector:
    region: node
  storageSpec:
    volumeClaimTemplate:
      spec:
        storageClassName: gp2
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 200Gi
      selector: {}

  ## Scrape various services
  serviceMonitors:

    ## Scrape Openshift router
    # - name: openshift-router
    #   labels:
    #     app: openshift-router
    #     prometheus: prometheus-test
    #   selector:
    #     matchLabels:
    #       router: router
    #   endpoints:
    #     - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    #       interval: 15s
    #       port: 1936-tcp
    #       scheme: http
    #   namespaceSelector:
    #     any: true

    ## Scrape Mysql exporter
    # - name: mysql-exporter
    #   labels:
    #     prometheus: prometheus-test
    #   selector:
    #     matchLabels:
    #       app: prometheus-mysql-exporter
    #   endpoints:
    #     - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    #       # Increasing interval and scrapeTimeout as it was taking up to 1m to get back
    #       interval: 5m
    #       scrapeTimeout: 5m
    #       scheme: http
    #   namespaceSelector:
    #     any: true

  ## Prometheus alert rules
  # prometheusRules:
  #   - name: alert.rules
  #     rules:
  #     - alert: ProbeHealth
  #       expr: probe_success < 1
  #       for: 5m
  #       annotations:
  #         description: Probe is failing

  additionalScrapeConfigs:

    - job_name: blackbox-ingress
      metrics_path: /probe
      params:
        module: [http_2xx_ssl]
      kubernetes_sd_configs:
        - role: ingress
      relabel_configs:
        - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
          regex: (.+);(.+);(.+)
          replacement: ${1}://${2}${3}
          target_label: __param_target
        - source_labels: [__address__]
          regex: (.*)(:80)?
          target_label: __param_target
        - target_label: __address__
          replacement: blackbox-exporter-prometheus-blackbox-exporter.prometheus-test.svc:9115
        - source_labels: [__param_target]
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_ingress_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_ingress_name]
          target_label: kubernetes_name

  # - job_name: blackbox-static
  #   metrics_path: /probe
  #   params:
  #     module: [http_2xx]
  #   static_configs:
  #     - targets:
  #       - grafana-test.au.amazee.io
  #   relabel_configs:
  #     - source_labels: [__address__]
  #       regex: (.*)(:80)?
  #       target_label: __param_target
  #     - source_labels: [__param_target]
  #       target_label: instance
  #     - source_labels: []
  #       target_label: __address__
  #       replacement: blackbox-exporter-prometheus-blackbox-exporter.prometheus-test.svc:9115

  # - job_name: blackbox-services
  #   metrics_path: /probe
  #   params:
  #     module: [http_2xx]
  #   kubernetes_sd_configs:
  #   - role: service
  #   relabel_configs:
  #   # Example relabel to probe only some services that have "example.io/should_be_probed = true" annotation
  #   #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_probed]
  #   #    action: keep
  #   #    regex: true
  #   - source_labels: [__address__]
  #     target_label: __param_target
  #   - target_label: __address__
  #     replacement: blackbox-exporter-prometheus-blackbox-exporter.prometheus-test.svc:9115
  #   - source_labels: [__param_target]
  #     target_label: instance
  #   - action: labelmap
  #     regex: __meta_kubernetes_service_label_(.+)
  #   - source_labels: [__meta_kubernetes_namespace]
  #     target_label: kubernetes_namespace
  #   - source_labels: [__meta_kubernetes_service_name]
  #     target_label: kubernetes_name


grafana:
  nodeSelector:
    region: node
  storageSpec:
    class: gp2
    accessMode: "ReadWriteOnce"
    resources:
      requests:
        storage: 10Gi
    selector: {}
  
  ## Custom dashboard list
  # serverDashboardConfigmaps: {}

  ## Keep the Dashboards that are defined in this HELM chart
  keepOriginalDashboards: false

  ## Disable anonymous auth
  auth:
    anonymous:
      enabled: "false"
  adminUser: "admin"
  adminPassword: "admin"

deployKubelets: true
deployKubeScheduler: false
deployKubeControllerManager: false
deployCoreDNS: false
deployKubeDNS: false
deployKubeEtcd: false